{"version":3,"sources":["utils.ts","FileLoader.tsx","Table.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["dateRegExpFR","InvalidData","Error","parseDateString","dateStr","parsed","exec","date","Date","setFullYear","parseInt","setMonth","setDate","setHours","setMinutes","setSeconds","styled","className","onLoad","onDrop","useCallback","acceptedFiles","reader","FileReader","onload","evt","target","result","data","Uint8Array","wb","read","type","inflated","utils","sheet_to_json","Object","values","Sheets","slice","map","rawDatum","Publié","console","error","readAsArrayBuffer","useDropzone","getRootProps","getInputProps","isDragActive","DAYS_LABELS_FR","0","1","2","3","4","5","6","formatNumber","value","Math","round","toString","ValueTd","td","props","ratio","rawData","length","columns","groupBy","datum","columnKeys","keys","v","rows","rowKeys","sort","a","b","log","scaleValue","d3Scale","domain","minBy","maxBy","range","colName","rowKey","colKey","results","filter","day","hour","findValue","App","useState","tableData","setTableData","fieldName","aggregation","aggregatedData","groupedByDay","getDay","entries","forEach","dayGroup","groupedByHour","getHours","hourGroup","push","groupByPublicationTime","reduce","total","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b29ccfc.chunk.js","sourcesContent":["import { DateString } from \"./types\";\n\nconst dateRegExpFR = /(\\d\\d)\\/(\\d\\d)\\/(\\d\\d\\d\\d) à (\\d\\d):(\\d\\d):(\\d\\d)/\n\nclass InvalidData extends Error {}\n\nexport const parseDateString = (dateStr: DateString) => {\n    const parsed = dateRegExpFR.exec(dateStr)\n    if (!parsed) {\n        throw new InvalidData(`invalid date string`)\n    }\n    const date = new Date()\n    date.setFullYear(parseInt(parsed[3], 10))\n    date.setMonth(parseInt(parsed[2], 10) - 1)\n    date.setDate(parseInt(parsed[1], 10))\n\n    date.setHours(parseInt(parsed[4], 10))\n    date.setMinutes(parseInt(parsed[5], 10))\n    date.setSeconds(parseInt(parsed[6], 10))\n\n    return date\n}","import React, { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport styled from 'styled-components'\nimport { read, WorkBook, utils } from 'xlsx'\nimport { FbStatData, FbStatDataRaw, FbStatDatum, FbStatDatumRaw } from './types'\nimport { parseDateString } from './utils'\n\ninterface Props {\n    className?: string\n    onLoad: (parsed: FbStatData) => void\n}\n\nconst FileLoader: React.FunctionComponent<Props> = ({ className, onLoad }) => {\n    const onDrop = useCallback((acceptedFiles) => {\n        const reader = new FileReader()\n        reader.onload = function (evt) {\n            if (!evt || !evt.target || !evt.target.result) {\n                console.error('missing file')\n                return\n            }\n            const data = new Uint8Array(evt.target.result as ArrayBuffer)\n            const wb: WorkBook = read(data, {type: 'array'})\n            const parsed = utils.sheet_to_json(Object.values(wb.Sheets)[0]) as FbStatDataRaw\n            const inflated: FbStatData = parsed.slice(1).map((rawDatum: FbStatDatumRaw) => ({\n                ...rawDatum,\n                \"Publié\": parseDateString(rawDatum.Publié)\n            }))\n            onLoad(inflated)\n        }\n        reader.readAsArrayBuffer(acceptedFiles[0]);\n    }, [])\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\n        onDrop,\n    })\n\n    return (\n        <div className={className} {...getRootProps()}>\n            <input {...getInputProps()} />\n            {isDragActive ? (\n                <p>Drop the files here ...</p>\n            ) : (\n                <p>Drag 'n' drop some files here, or click to select files</p>\n            )}\n        </div>\n    )\n}\n\nexport default styled(FileLoader)`\n    padding: 1em;\n    border: solid 1px black;\n    display: inline-block;\n    cursor: pointer;\n`\n","import groupBy from 'lodash.groupby'\nimport maxBy from 'lodash.maxby'\nimport minBy from 'lodash.minby'\nimport React from 'react'\nimport { useTable } from 'react-table'\nimport * as d3Scale from 'd3-scale'\nimport styled from 'styled-components'\nimport { AggregatedValue, ColumnValue, TableData, TableDatum } from './types'\n\ninterface Props {\n    className?: string\n    data: TableData\n}\n\nconst DAYS_LABELS_FR = {\n    0: 'Lundi',\n    1: 'Mardi',\n    2: 'Mercredi',\n    3: 'Jeudi',\n    4: 'Vendredi',\n    5: 'Samedi',\n    6: 'Dimanche',\n}\n\nconst formatNumber = (value: number) => Math.round(value).toString(10)\n\nconst findValue = (data: TableData, colKey: ColumnValue, rowKey: ColumnValue) => {\n    const results = data.filter(datum => \n        datum.columns['day'] === colKey \n            && datum.columns['hour'] === rowKey)\n    if (results.length !== 1) {\n        return {value: 0, columns: {day: colKey, hour: rowKey}}\n        // throw new Error(`datum with (day=${colKey}, hour=${rowKey}) not found`)\n    }\n    return results[0]\n}\n\nconst Table: React.FunctionComponent<Props> = ({ className, data: rawData }) => {\n    if (rawData.length === 0) {\n        throw new Error(`data empty`)\n    }\n      \n    const columns = groupBy(rawData, (datum) => datum.columns['day'])\n    const columnKeys = Object.keys(columns).map(v => parseInt(v, 10))\n    const rows = groupBy(rawData, (datum) => datum.columns['hour'])\n    const rowKeys = Object.keys(rows).map(v => parseInt(v, 10))\n    columnKeys.sort((a, b) => a - b)\n    rowKeys.sort((a, b) => a - b)\n    console.log(columns, rows, columnKeys, rowKeys)\n\n    const scaleValue = d3Scale.scaleLinear().domain([\n        minBy(rawData, datum => datum.value)!.value as number,\n        maxBy(rawData, datum => datum.value)!.value as number,\n    ]).range([0, 1])\n\n    return (\n        <table>\n        <thead>\n            <tr>\n                <th></th>\n                {columnKeys.map(colName => (\n                    <th>{(DAYS_LABELS_FR as any)[colName.toString(10)]}</th>\n                ))}\n            </tr>\n        </thead>\n        <tbody>\n\n            {rowKeys.map(rowKey => (\n                <tr>\n                    <th>\n                        {rowKey}\n                    </th>\n                    {columnKeys.map(colKey => {\n                        const value = findValue(rawData, colKey, rowKey).value as number\n                        return (\n                            <ValueTd ratio={scaleValue(value)}>\n                                {formatNumber(value)}\n                            </ValueTd>\n                        )\n                    })}\n                </tr>\n            ))}\n\n        </tbody>\n      </table>\n    )\n}\n\nconst ValueTd = styled.td<{ratio: number}>`\n    padding: 2em;\n    background: ${props => `rgba(0, 255, 0, ${props.ratio})`}\n`\n\nexport default styled(Table)`\n    padding: 1em;\n    border: solid 1px black;\n    display: inline-block;\n    cursor: pointer;\n`\n","import groupBy from 'lodash.groupby'\nimport React, { useState } from 'react'\nimport FileLoader from './FileLoader'\nimport Table from './Table'\nimport { AggregatedValue, FbStatData, FbStatDatumNumberFields, TableData } from './types'\n\nconst makeAggregationAvg = (fieldName: FbStatDatumNumberFields) => \n    (data: FbStatData) => data.reduce((total, datum) => total + datum[fieldName], 0) / data.length\n\nconst groupByPublicationTime = (data: FbStatData, aggregation: (data: FbStatData) => AggregatedValue) => {\n    const aggregatedData: TableData = []\n    const groupedByDay = groupBy(data, (datum) => datum.Publié.getDay())\n    Object.entries(groupedByDay).forEach(([day, dayGroup]) => {\n        const groupedByHour = groupBy(dayGroup, (datum) => datum.Publié.getHours())\n        Object.entries(groupedByHour).forEach(([hour, hourGroup]) => {\n            aggregatedData.push({\n                value: aggregation(hourGroup),\n                columns: {hour: parseInt(hour, 10), day: parseInt(day, 10)}\n            })\n        })\n    })\n    return aggregatedData\n}\n\nfunction App() {\n    const [tableData, setTableData] = useState<TableData | null>(null)\n    const onLoad = (data: FbStatData) => {\n        setTableData(groupByPublicationTime(\n            data, \n            makeAggregationAvg('Lifetime Post Total Reach')\n        ))\n    }\n    console.log(tableData)\n    return (\n        <div className=\"App\">\n            {!tableData ? <FileLoader onLoad={onLoad} />: null}\n            {tableData ? \n                (   \n                    <>\n                        <h2>Lifetime Post Total Reach</h2>\n                        <Table data={tableData} />\n                    </>\n                )\n            : null}\n        </div>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}